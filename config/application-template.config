###############################################################################
## Application
###############################################################################

[Application]
# The name of the application (will be used for the Python package name)
name=myapp
# The full name of the application
fullName=My DXL Application
# The name of the application class (Python class name)
appClassName=MyDxlApplication
# Copyright information for the application (optional)
copyright=Copyright 2017
# A comma delimited list of event handler names. For each handler specified, a
# corresponding section must be defined within this configuration file
# (See "Event Handlers" below). This section is optional (an application
# is not required to register DXL event handlers).
eventHandlers=eventhandler1
# A comma delimited list of service names. For each service specified, a
# corresponding section must be defined within this configuration file
# (See "Services" below). This section is optional (an application
# is not required to expose DXL services).
services=service1
# A comma delimited list of Python packages the application requires.
# These packages will be added to the appropriate files (setup.py, etc.)
# (optional)
;installRequires=

###############################################################################
## Event Handlers
###############################################################################

[eventhandler1]
# The DXL topic associated with the event handler
topic=/some/dxl/event/topic
# The name for the event handler callback class (Python class name)
className=Event1Callback
# Whether the event handler should be invoked on a thread other than the
# incoming message thread. A separate thread must be used if synchronous
# DXL requests are made in the callback (which could cause deadlock).
# (optional, defaults to "yes")
;separateThread=yes

###############################################################################
## Services
###############################################################################

[service1]
# The "type" to associate with the service (a string used to uniquely identify
# the service type). Allows for multiple instances of the same service to be
# identified via their "type".
serviceType=/mycompany/service/myservice
# A comma delimited list of request handler names for the service. For each
# handler specified, a corresponding section must be defined within this
# configuration file. This section is optional (a service is not required to
# have request handlers).
requestHandlers=service1_requesthandler1

[service1_requesthandler1]
# The DXL topic associated with the request handler
topic=/mycompany/service/myservice/request1
# The name for the request handler callback class (Python class name)
className=Service1Request1Callback
# Whether the request handler should be invoked on a thread other than the
# incoming message thread. A separate thread must be used if synchronous
# DXL requests are made in the callback (which could cause deadlock).
# (optional, defaults to "yes")
;separateThread=yes
